펙토리 패턴 >> new()를 사용하지 않고 객체 사용  >>만들어서 돌려줌

new()의 문제 하나의 클래스를 여러번 뉴선얺면 문제 발생(수정 용이성이 떨어진다.)

쓰게 됨ㄴ 객체를 생성하기 때문에 고치기 힘들어 지므로 한번만 사용하자는게 목표

getInstance() >> 자주보게 될거임 >> 객체를 ㅏㄴ환하는 함수 

Factory 패턴 (Creational Design Pattern) >> 구ㅜ조패턴이 아니고 생성해주는 패 >> 실무에서는 너무많이 씀

계산기 >> 옵져버 패턴 사용 >> 마우스 이벤트 

실글턴 >> 객체 개수 제한(다음시간)



시험에 만ㅎ이 나오는 언어들-
1)	simple factory
encapsulate instantiation. 객체생성을 구체클래스에 맡기지 않음.
2)factory method
defer instantiation to subclasses.
GoF "Define an interface for creating an object, but let the classes which implement the interface decide which class to instantiate. The Factory method lets a class defer instantiation to subclasses"
3)abstract factory
GoF "to provide an interface for creating families of related or dependent objects without specifying their concrete classes."



simple factory 스트링에 타라서 바꿔주는 함구 구현
if문으로 입력값을 가지고 있어서 리턴해줌(객체지향에서 if문은 안된다.(써도는 되지만) >> 다형성 사용하라)

if문 대신 다형성 사용 스트레ㅣ지 패턴 

노트 uml배움

DIP원칙 디펜던시 역전 원직 추상클래스에 상속시켜라

(정적)클래스 다이어그램이 나타내는 것 >>클래스 관계

(동적)S  다이어그램이 나타내는 것 >>클래스 순서(화살표 >> 넘겨준다. >>캑체에서는 메소드를 호출한다.)
1 ->2(1이 2를 호출)

 git > fork >소스 가져와서 보거나 공헌하려고 사용

쓸 때만드는 것을 lazy 하다고 만ㄹ함 (lazy intan

early 미리 만드는 것

다형성 >> Dynamic Method I() (컴파일 때는 모르지만 런타임 때믄 알아서 실행시키ㅡㄴ 것)

시스템 패스  찾고 없ㅇ,면 찾으곳 지정해줘야 함 -cp 만든 클래스를 넣을 디랙토리 지정 -d